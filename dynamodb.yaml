AWSTemplateFormatVersion: "2010-09-09"
Resources:
  MyDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: studentData
      AttributeDefinitions:
        - AttributeName: StudentId
          AttributeType: S
        - AttributeName: SortKey
          AttributeType: S
      KeySchema:
        - AttributeName: StudentId
          KeyType: HASH
        - AttributeName: SortKey
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  MyLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaDynamoDBPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Scan
                  - dynamodb:Query
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                Resource: !GetAtt MyDynamoDBTable.Arn
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  MyLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: MyLambdaFunction
      Handler: index.lambda_handler
      Role: !GetAtt MyLambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          def lambda_handler(event, context):
              # Initialize a DynamoDB resource object for the specified region
              dynamodb = boto3.resource('dynamodb', region_name='us-east-1')
              # Select the DynamoDB table named 'studentData'
              table = dynamodb.Table('studentData')
              # Scan the table and get all the items
              response = table.scan()
              data = response['Items']
              # If there are more items to scan, continue scanning until all items are found
              while 'LastEvaluatedKey' in response:
                  response = table.scan(ExclusiveStartKey=response['LastEvaluatedKey'])
                  data.extend(response['Items'])
              # Return the retrieved data
              return {
                  "statusCode": 200,
                  "body": json.dumps(data)
              }
      Runtime: python3.8
      Timeout: 30
